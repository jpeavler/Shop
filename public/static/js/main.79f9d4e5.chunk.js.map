{"version":3,"sources":["config/auth.js","components/NavBar.js","components/UserComp/LoginForm.js","components/InventoryComp/ShopDisplay.js","pages/Home.js","components/InventoryComp/InventoryForm.js","components/InventoryComp/InventoryDisplay.js","pages/Inventory.js","components/UserComp/ProfileForm.js","pages/Profile.js","components/InventoryComp/CartDisplay.js","pages/Cart.js","components/UserComp/SignupForm.js","pages/Signup.js","components/ShopRouter.js","App.js","extras/serviceWorker.js","index.js"],"names":["isLoggedIn","localStorage","getItem","NavBar","logBtn","loggedIn","setLoggedIn","handleLogout","removeItem","window","location","reload","Button","className","onClick","color","to","LoginForm","useState","username","setUsername","password","setPassword","remembered","setRemembered","msg","setMsg","displaySpinner","setSpinner","useEffect","localUsername","form","spinner","Form","onSubmit","event","preventDefault","setItem","fetch","process","method","headers","body","JSON","stringify","then","response","token","status","get","Input","type","value","placeholder","onChange","target","FormGroup","name","checked","Label","for","block","style","Spinner","ShopDisplay","inventory","setInv","filterModal","setFModal","cart","setCart","getInv","json","inv","handleSort","sortMethod","sortedInv","Object","assign","sort","a","b","quantity","price","handleCart","id","added","changedCart","concat","cartArray","split","filter","cartID","forEach","displayInv","map","item","addToCart","removeFromCart","inCart","CartID","_id","isActive","Card","key","CardHeader","CardBody","desc","seller","CardFooter","toggleModal","Modal","isOpen","toggle","ModalHeader","ModalBody","CardDeck","Home","InventoryForm","refresh","myItem","formName","formDesc","formCount","formPrice","modalOpen","setName","setDesc","setCount","setPrice","modal","setModal","userInfo","renderSubmit","cancel","formHeader","updatedItem","addedItem","required","min","step","InventoryDisplay","isUpdate","setUpdate","itemToUpdate","setItemToUpdate","displayActive","setActive","displayInactive","setInactive","getUserInfo","renderForm","activeDisplayBtn","inactiveDisplayBtn","toggleActive","newActiveStatus","activeButton","deleteButton","handleUpdate","Inventory","ProfileForm","updateProfile","bio","setBio","setPic","user","src","alt","Profile","setUser","newBio","newPic","pic","img","Media","object","left","heading","toUpdate","CartDisplay","cartItems","setCartItems","total","setTotal","getTotal","invInCart","keep","itemID","myTotal","parseFloat","Table","striped","Cart","SignupForm","setUserName","email","setEmail","pswrdconfirm","setConfirm","usernameTaken","setTaken","onBlur","fetchMsg","length","Signup","PrivateRoute","children","rest","render","pathname","state","from","ShopRouter","exact","path","App","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.79f9d4e5.chunk.js","sourcesContent":["// Returns token if it exists \r\nexport const isLoggedIn = () => {\r\n    const token = localStorage.getItem('auth');\r\n    return token;\r\n}\r\n// Removes token from LocalStorage\r\nexport const logout = () => {\r\n    localStorage.removeItem('auth');\r\n    localStorage.removeItem(\"Cart\");\r\n    window.location.reload(false);\r\n}\r\n// Stores the Auth Token in LocalStorage\r\nexport const setToken = (token) => {\r\n    localStorage.setItem('auth', token);\r\n}","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {Button} from 'reactstrap';\r\nimport '../stylesheets/NavBar.css';\r\nimport {logout} from '../config/auth';\r\n\r\nconst NavBar = ({loggedIn, setLoggedIn}) =>{\r\n    let logBtn;\r\n    const handleLogout = () => {\r\n        logout();\r\n        setLoggedIn(false);\r\n    }\r\n    if(loggedIn) {\r\n        logBtn = <Button className=\"NavLink\" onClick={() => handleLogout()} color=\"primary\">Logout</Button>\r\n    } else {\r\n        logBtn = <Link to='/signup' className=\"NavLink\">Register</Link>\r\n    }\r\n    return(\r\n        <nav>\r\n            <Link to='/' className=\"NavLink\">Home</Link>\r\n            <Link to='/profile' className=\"NavLink\">Profile</Link>\r\n            <Link to='/inventory' className=\"NavLink\">Inventory</Link>\r\n            <Link to='/cart' className=\"NavLink\">Cart</Link>\r\n            {logBtn}\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default NavBar;","import React, {useState, useEffect} from 'react';\r\nimport {Form, FormGroup, Input, Label, Button, Spinner} from 'reactstrap';\r\nimport {setToken, isLoggedIn} from '../../config/auth';\r\n\r\nconst LoginForm = ({loggedIn, setLoggedIn}) => {\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [remembered, setRemembered] = useState(false);\r\n    const [msg, setMsg] = useState('');\r\n    const [displaySpinner, setSpinner] = useState(false);\r\n    useEffect(() => {\r\n        const localUsername = localStorage.getItem('username');\r\n        if(localUsername) {\r\n            setUsername(localUsername);\r\n            setRemembered(true);\r\n        }\r\n    }, []);\r\n    const toggleRemembered = () => {\r\n        setRemembered(!remembered);\r\n    }\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        setSpinner(true);\r\n        setMsg('');\r\n        if(remembered) {\r\n            localStorage.setItem('username', username);\r\n        } else {\r\n            localStorage.removeItem('username');\r\n        }\r\n        fetch(`${process.env.REACT_APP_API_URL}/api/auth/login`, {\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({username, password})\r\n        }).then(response => {\r\n            if(response.status === 200) {\r\n                setToken(response.headers.get('authentication'));\r\n                setLoggedIn(isLoggedIn());\r\n            } else {\r\n                setMsg('Login Failed');\r\n            }\r\n            setSpinner(false);\r\n        })\r\n    }\r\n    let form;\r\n    if(!loggedIn) {\r\n        form = <Form onSubmit={handleSubmit}>\r\n                    <h3>Login</h3>\r\n                    <Input type=\"text\" value={username} placeholder=\"Username\" \r\n                            onChange={({target}) => setUsername(target.value)}/>\r\n                    <Input type=\"password\" value={password} placeholder=\"Password\" \r\n                            onChange={({target}) => setPassword(target.value)}/>\r\n                    <FormGroup>\r\n                        <Input type=\"checkbox\" name=\"remember\" checked={remembered} \r\n                            onChange={toggleRemembered}/>\r\n                        <Label for=\"remember\">Remember Me</Label>\r\n                    </FormGroup>\r\n                    <Button block>Login</Button>\r\n                    <span style={{'color': 'red'}}>{msg}</span>\r\n                </Form>\r\n    } else {\r\n        form = <div>Signed In</div>\r\n    }\r\n    let spinner;\r\n    if (displaySpinner) {spinner = <Spinner color='primary'/>}\r\n    else {spinner = <></>}\r\n    return (\r\n        <>{form}{spinner}</>\r\n    )\r\n}\r\n\r\nexport default LoginForm;","import React, {useState, useEffect} from 'react';\r\nimport {Modal, ModalBody, ModalHeader, Button, CardDeck, Card, CardHeader, CardBody, CardFooter} from 'reactstrap';\r\nimport {isLoggedIn} from '../../config/auth';\r\n\r\nconst ShopDisplay = () => {\r\n    if(!localStorage.getItem(\"Cart\")){localStorage.setItem(\"Cart\", \"\")}\r\n    const [inventory, setInv] = useState([]);\r\n    const [filterModal, setFModal] = useState(false);\r\n    const [cart, setCart] = useState(localStorage.getItem(\"Cart\"));\r\n\r\n    useEffect(() => {\r\n        getInv();\r\n    }, []);\r\n    const getInv = () => {\r\n        fetch(`${process.env.REACT_APP_API_URL}/api/inventory`)\r\n            .then(response => response.json()).then(inv => setInv(inv))\r\n    }\r\n    const handleSort = (sortMethod) => {\r\n        let sortedInv = Object.assign([], inventory);\r\n        if(sortMethod == \"quantity\") {\r\n            sortedInv.sort((a, b) => b.quantity - a.quantity);\r\n        } else if(sortMethod == \"price\") {\r\n            sortedInv.sort((a, b) => b.price - a.price);\r\n        }\r\n        setInv(sortedInv);\r\n    }\r\n    const handleCart = (id, added) => {\r\n        let changedCart = cart;\r\n        if(added) {\r\n            changedCart = changedCart.concat(id, \",\");\r\n        } else {\r\n            let cartArray = changedCart.split(',');\r\n            cartArray = cartArray.filter((cartID) => id != cartID);\r\n            changedCart = \"\";\r\n            cartArray.forEach((cartID) => {\r\n                if(cartID != \"\"){\r\n                    changedCart = changedCart.concat(cartID, \",\")\r\n                }\r\n            })\r\n        }\r\n        setCart(changedCart);\r\n        localStorage.setItem('Cart', changedCart);\r\n    }\r\n    const displayInv = inventory.map((item) => {\r\n        let addToCart;\r\n        let removeFromCart;\r\n        let cartArray = cart.split(','); \r\n        let inCart = false;\r\n        cartArray.forEach((CartID) => {\r\n            if(item._id == CartID) {inCart = true}\r\n        });\r\n        if(isLoggedIn()) {\r\n            if(inCart) {\r\n                removeFromCart = <Button color=\"primary\" onClick={() => handleCart(item._id, false)} block>Remove From Cart</Button>\r\n            } else {\r\n                addToCart = <Button color=\"primary\" onClick={() => handleCart(item._id, true)} block>Add To Cart</Button>\r\n            }\r\n        }\r\n        if(item.isActive) {\r\n            return (\r\n                <Card key={item._id} className=\"item\">\r\n                    <CardHeader className=\"itemname\">{item.name}</CardHeader>\r\n                    <CardBody>\r\n                        <p className=\"price\">Price: ${item.price}</p>\r\n                        <p className=\"quantity\">Count: {item.quantity}</p>\r\n                        <p className=\"description\">{item.desc}</p>\r\n                        <p className=\"Seller\">Seller: {item.seller}</p>\r\n                    </CardBody>\r\n                    <CardFooter>\r\n                        {addToCart}\r\n                        {removeFromCart}\r\n                    </CardFooter>\r\n                </Card>\r\n            )\r\n        }\r\n    });\r\n    const toggleModal = () => setFModal(!filterModal);\r\n    return (\r\n        <div key=\"inventory\" className=\"inventory\">\r\n            <h2>Marketplace</h2>\r\n            <Button color=\"primary\" className=\"topbtn\" onClick={() => toggleModal()}>Display Settings</Button>\r\n            <Modal key=\"filter\" isOpen={filterModal} toggle={toggleModal} className=\"modaltoggle\">\r\n                <ModalHeader>Sort and Hide Options</ModalHeader>\r\n                <ModalBody>\r\n                    <Button color=\"primary\" onClick={() => handleSort(\"quantity\")} block>Sort by Count</Button>\r\n                    <Button color=\"primary\" onClick={() => handleSort(\"price\")} block>Sort by Price</Button>\r\n                    <Button color=\"secondary\" onClick={() => toggleModal()} block>Close</Button>\r\n                </ModalBody>\r\n            </Modal>\r\n            <CardDeck className=\"inventorydeck\">{displayInv}</CardDeck>\r\n        </div>\r\n    )\r\n}\r\nexport default ShopDisplay;","import React, {useState} from 'react';\r\nimport NavBar from '../components/NavBar';\r\nimport LoginForm from '../components/UserComp/LoginForm';\r\nimport ShopDisplay from '../components/InventoryComp/ShopDisplay';\r\nimport {isLoggedIn} from '../config/auth'\r\n\r\nconst Home = () => {\r\n    const [loggedIn, setLoggedIn] = useState(isLoggedIn());\r\n    return (\r\n        <div className=\"home\">\r\n            <NavBar loggedIn={loggedIn} setLoggedIn ={setLoggedIn}/>\r\n            <LoginForm loggedIn={loggedIn} setLoggedIn ={setLoggedIn}/>\r\n            <ShopDisplay/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;","import React, {useState, useEffect} from 'react';\r\nimport {Modal, ModalHeader, ModalBody, Form, Input, Button} from 'reactstrap';\r\nimport {isLoggedIn} from '../../config/auth';\r\n\r\nconst InventoryForm = ({refresh, myItem, id}) => {\r\n    let formName = \"\";\r\n    let formDesc = \"\";\r\n    let formCount = \"\";\r\n    let formPrice = \"\";\r\n    let modalOpen = false;\r\n    if(myItem) {\r\n        formName = myItem.name;\r\n        formDesc = myItem.desc;\r\n        formCount = myItem.quantity;\r\n        formPrice = myItem.price;\r\n        modalOpen = true;\r\n    }\r\n    const [name, setName] = useState(formName);\r\n    const [desc, setDesc] = useState(formDesc);\r\n    const [quantity, setCount] = useState(formCount);\r\n    const [price, setPrice] = useState(formPrice);\r\n    const [modal, setModal] = useState(modalOpen);\r\n    const [username, setUsername] = useState('');\r\n\r\n    const getUserInfo = () => {\r\n        fetch(`${process.env.REACT_APP_API_URL}/api/auth/id/${isLoggedIn()}`)\r\n        .then(response => response.json()).then(userInfo => setUsername(userInfo.username))\r\n    }\r\n    useEffect(() => {\r\n        getUserInfo();\r\n    }, [])\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        let isActive = true;\r\n        let seller = username;\r\n        if(myItem) {\r\n            isActive = myItem.isActive;\r\n            const updatedItem = {name, desc, quantity, price, isActive, seller};\r\n            fetch(`${process.env.REACT_APP_API_URL}/api/inventory/${id}`, {\r\n                method: 'PUT',\r\n                headers: {'Content-Type' : 'application/json'},\r\n                body: JSON.stringify(updatedItem)\r\n            }).then(() => setName(''))\r\n                .then(() => setDesc('')).then(() => setCount(''))\r\n                .then(() => setPrice('')).then(() => refresh()).then(() => setModal(false))\r\n        } else {\r\n            const addedItem = {name, desc, quantity, price, isActive, seller};\r\n            fetch(`${process.env.REACT_APP_API_URL}/api/inventory`, {\r\n                method: 'POST',\r\n                headers: {'Content-Type' : 'application/json'},\r\n                body: JSON.stringify(addedItem)\r\n            }).then(() => setName(''))\r\n            .then(() => setDesc('')).then(() => setCount(''))\r\n            .then(() => setPrice('')).then(() => refresh()).then(() => setModal(false))\r\n        }\r\n    }\r\n    const toggle = () => setModal(!modal);\r\n    let renderSubmit;\r\n    let cancel;\r\n    let formHeader;\r\n    if(myItem) {\r\n        renderSubmit = <Button color=\"primary\" key=\"edit\" type=\"submit\" block>Edit Item</Button>\r\n        cancel = <Button type=\"button\" key=\"canceledit\" onClick={() => refresh()} block>Cancel Edit</Button>\r\n        formHeader = <ModalHeader key=\"edithead\">Edit Item: {myItem.name}</ModalHeader>\r\n    } else {\r\n        renderSubmit = <Button color=\"primary\" key=\"add\" type=\"submit\" block>Add Item</Button>\r\n        cancel = <Button type=\"button\" key=\"canceladd\" onClick={toggle} block>Cancel Add</Button>\r\n        formHeader = <ModalHeader key=\"addhead\">Add a New Item</ModalHeader>\r\n    }\r\n    return (\r\n        <><Button color=\"primary\" className=\"topbtn\" onClick={toggle}>Add New Item</Button>\r\n        <Modal isOpen={modal} toggle={toggle} className=\"modelform\">\r\n            {formHeader}\r\n            <ModalBody>\r\n            <Form onSubmit={handleSubmit}>\r\n                <Input placeholder=\"Item Name\" value={name} \r\n                    type=\"text\" onChange={({target}) => setName(target.value)} required/>\r\n                <Input type=\"textarea\" placeholder=\"Description\" value={desc} \r\n                    onChange={({target}) => setDesc(target.value)}/>\r\n                <Input placeholder=\"Item Count\" value={quantity} type=\"number\" \r\n                    onChange={({target}) => setCount(target.value)} required/>\r\n                <Input placeholder=\"Price\" value={price}\r\n                    type=\"number\" min=\".01\" step=\".01\" \r\n                    onChange={({target}) => setPrice(target.value)} required/>\r\n                {renderSubmit}\r\n                {cancel}\r\n            </Form>\r\n            </ModalBody>\r\n        </Modal></>\r\n    )\r\n}\r\n\r\nexport default InventoryForm;","import React, {useState, useEffect} from 'react';\r\nimport {Modal, ModalBody, ModalHeader, Button, CardDeck, Card, CardHeader, CardBody, CardFooter} from 'reactstrap';\r\nimport {isLoggedIn} from '../../config/auth';\r\nimport InventoryForm from './InventoryForm';\r\n\r\nconst InventoryDisplay = () => {\r\n    const [inventory, setInv] = useState([]);\r\n    const [isUpdate, setUpdate] = useState(false);\r\n    const [itemToUpdate, setItemToUpdate] = useState('');\r\n    const [displayActive, setActive] = useState(true);\r\n    const [displayInactive, setInactive] = useState(true);\r\n    const [filterModal, setFModal] = useState(false);\r\n    const [username, setUsername] = useState('');\r\n\r\n    useEffect(() => {\r\n        getUserInfo();\r\n        getInv();\r\n    }, []);\r\n    const getInv = () => {\r\n        fetch(`${process.env.REACT_APP_API_URL}/api/inventory`)\r\n            .then(response => response.json()).then(inv => setInv(inv))\r\n            .then(() => setUpdate(false)).then(() => setItemToUpdate(''))\r\n    }\r\n    const getUserInfo = () => {\r\n        fetch(`${process.env.REACT_APP_API_URL}/api/auth/id/${isLoggedIn()}`)\r\n        .then(response => response.json()).then(userInfo => setUsername(userInfo.username))\r\n    }\r\n    const handleUpdate = (item) => {\r\n        setItemToUpdate(item);\r\n        setUpdate(true);\r\n    }\r\n    const handleDelete = (id) => {\r\n        fetch(`${process.env.REACT_APP_API_URL}/api/inventory/${id}`, {\r\n            method: 'DELETE'\r\n        }).then(response => response.json()).then(getInv)\r\n    }\r\n    const toggleActive = (id, isActive) => {\r\n        const newActiveStatus = {isActive};\r\n        fetch(`${process.env.REACT_APP_API_URL}/api/inventory/${id}`, {\r\n            method: 'PATCH',\r\n            headers: {'Content-Type' : 'application/json'},\r\n            body: JSON.stringify(newActiveStatus)\r\n        }).then(getInv)\r\n    }\r\n    const handleSort = (sortMethod) => {\r\n        let sortedInv = Object.assign([], inventory);\r\n        if(sortMethod == \"quantity\") {\r\n            sortedInv.sort((a, b) => b.quantity - a.quantity);\r\n        } else if(sortMethod == \"price\") {\r\n            sortedInv.sort((a, b) => b.price - a.price);\r\n        }\r\n        setInv(sortedInv);\r\n    }\r\n    const displayInv = inventory.map((item) => {\r\n        let activeButton;\r\n        let deleteButton;\r\n        if(item.isActive) {\r\n            activeButton = <Button color=\"warning\" onClick={() => toggleActive(item._id, false)} block>Deactivate</Button>\r\n        } else {\r\n            activeButton = <Button color=\"success\" onClick={() => toggleActive(item._id, true)} block>Activate</Button>\r\n            deleteButton = <Button color=\"danger\" onClick={() => handleDelete(item._id)} block>Delete</Button>      \r\n        }\r\n        if(item.seller == username) {\r\n            if((item.isActive && displayActive) || (!item.isActive && displayInactive)) {\r\n                return (\r\n                    <Card key={item._id} className=\"item\">\r\n                        <CardHeader className=\"itemname\">{item.name}</CardHeader>\r\n                        <CardBody>\r\n                            <p className=\"price\">Price: ${item.price}</p>\r\n                            <p className=\"quantity\">Count: {item.quantity}</p>\r\n                            <p className=\"description\">{item.desc}</p>\r\n                        </CardBody>\r\n                        <CardFooter>\r\n                            <Button color=\"primary\" onClick={() => handleUpdate(item)} block>Edit</Button>\r\n                            {activeButton}\r\n                            {deleteButton}\r\n                        </CardFooter>\r\n                    </Card>\r\n                )\r\n            }\r\n        }\r\n    });\r\n    const toggleModal = () => setFModal(!filterModal);\r\n    let renderForm;\r\n    if(isUpdate) {\r\n        renderForm = <InventoryForm key={itemToUpdate._id} refresh={getInv} isUpdate={isUpdate} myItem={itemToUpdate} id={itemToUpdate._id}/>\r\n    } else {\r\n        renderForm = <InventoryForm key=\"additem\" refresh={getInv} isUpdate={isUpdate}/>\r\n    }\r\n    let activeDisplayBtn;\r\n    if(displayActive) {\r\n        activeDisplayBtn = <Button color=\"primary\" key=\"hideAct\" onClick={() => setActive(false)} block>Hide Active</Button>\r\n    }else {\r\n        activeDisplayBtn = <Button color=\"primary\" key=\"showAct\" onClick={() => setActive(true)} block>Show Active</Button>\r\n    }\r\n    let inactiveDisplayBtn;\r\n    if(displayInactive) {\r\n        inactiveDisplayBtn = <Button color=\"primary\" key=\"hideIn\" onClick={() => setInactive(false)} block>Hide Inactive</Button>\r\n    }else {\r\n        inactiveDisplayBtn = <Button color=\"primary\" key=\"showIn\" onClick={() => setInactive(true)} block>Show Inactive</Button>\r\n    }\r\n    return (\r\n        <div key=\"inventory\" className=\"inventory\">\r\n            <h2>Your Inventory</h2>\r\n            {renderForm}\r\n            <Button color=\"primary\" className=\"topbtn\" onClick={() => toggleModal()}>Display Settings</Button>\r\n            <Modal key=\"filter\" isOpen={filterModal} toggle={toggleModal} className=\"modaltoggle\">\r\n                <ModalHeader>Sort and Hide Options</ModalHeader>\r\n                <ModalBody>\r\n                {activeDisplayBtn}\r\n                {inactiveDisplayBtn}\r\n                <Button color=\"primary\" onClick={() => handleSort(\"quantity\")} block>Sort by Count</Button>\r\n                <Button color=\"primary\" onClick={() => handleSort(\"price\")} block>Sort by Price</Button>\r\n                <Button color=\"secondary\" onClick={() => toggleModal()} block>Close</Button>\r\n                </ModalBody>\r\n            </Modal>\r\n            <CardDeck className=\"inventorydeck\">{displayInv}</CardDeck>\r\n        </div>\r\n    )\r\n}\r\nexport default InventoryDisplay;","import React, {useState} from 'react';\r\nimport '../stylesheets/inventory.css';\r\nimport InventoryDisplay from '../components/InventoryComp/InventoryDisplay';\r\nimport NavBar from '../components/NavBar';\r\nimport {isLoggedIn} from '../config/auth';\r\n\r\nconst Inventory = () => {\r\n    const [loggedIn, setLoggedIn] = useState(isLoggedIn());\r\n    return (\r\n        <div className=\"inventory\">\r\n            <NavBar loggedIn={loggedIn} setLoggedIn ={setLoggedIn}/>\r\n            <InventoryDisplay/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Inventory;","import React from 'react';\r\nimport {Button, Modal, ModalHeader, ModalBody, Form, Input} from 'reactstrap';\r\nimport '../../stylesheets/profile.css';\r\n\r\nconst ProfileForm = ({updateProfile, bio, setBio, setPic, modal, toggle, user}) => {\r\n    return (\r\n        <Modal isOpen={modal} toggle={toggle} className=\"profileform\">\r\n            <ModalHeader toggle={toggle}>Edit Portfolio</ModalHeader>\r\n            <ModalBody><Form onSubmit={updateProfile}>\r\n                <Input type=\"textarea\" value={bio} onChange={({target}) => setBio(target.value)} required/>\r\n                <button type=\"button\" onClick={() => setPic(0)}>\r\n                    <img src=\"/assets/blackUser.png\" alt=\"Profile0\" className=\"profilepic\"/>\r\n                </button>\r\n                <button type=\"button\" onClick={() => setPic(1)}>\r\n                    <img src=\"/assets/redUser.png\" alt=\"Profile1\" className=\"profilepic\"/>\r\n                </button>\r\n                <button type=\"button\" onClick={() => setPic(2)}>\r\n                    <img src=\"/assets/blueUser.png\" alt=\"Profile2\" className=\"profilepic\"/>\r\n                </button>\r\n                <button type=\"button\" onClick={() => setPic(3)}>\r\n                    <img src=\"/assets/purpleUser.png\" alt=\"Profile3\" className=\"profilepic\"/>\r\n                </button>\r\n                <Button color=\"primary\" block>Update Profile</Button>\r\n            </Form></ModalBody>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ProfileForm;","import React, {useState, useEffect} from 'react';\r\nimport {Button, Media} from 'reactstrap';\r\nimport NavBar from '../components/NavBar'\r\nimport {isLoggedIn} from '../config/auth';\r\nimport ProfileForm from '../components/UserComp/ProfileForm';\r\n\r\nconst Profile = () => {\r\n    const [loggedIn, setLoggedIn] = useState(isLoggedIn());     //loggedIn returns the token if the user is logged in\r\n    const [user, setUser] = useState(\"\");\r\n    const [newBio, setBio] = useState();\r\n    const [newPic, setPic] = useState(0);\r\n    const [modalOpen, setModal] = useState(false);\r\n\r\n    const getUserInfo = () => {\r\n        fetch(`${process.env.REACT_APP_API_URL}/api/auth/id/${loggedIn}`)\r\n        .then(response => response.json()).then(userInfo => {\r\n            setUser(userInfo); \r\n            setBio(userInfo.bio);\r\n            setPic(userInfo.pic);\r\n        })\r\n    }\r\n    const updateProfile = (event) => {\r\n        event.preventDefault();\r\n        let toUpdate = {bio: newBio, pic: newPic};\r\n        fetch(`${process.env.REACT_APP_API_URL}/api/auth/id/${loggedIn}`, {\r\n            method: \"PATCH\",\r\n            headers: {'Content-Type' : 'application/json'},\r\n            body: JSON.stringify(toUpdate)\r\n        }).then(() => getUserInfo()).then(() => setModal(false))\r\n    }\r\n    useEffect(() => {\r\n        getUserInfo();\r\n    }, []);\r\n    const toggle = () => {setModal(!modalOpen)}\r\n\r\n    let img;\r\n    if(user.pic == 0) {img =<Media object src=\"/assets/blackUser.png\" alt=\"Profile0\" className=\"profilepic\"/>}\r\n    else if(user.pic == 1) {img =<Media object src=\"/assets/redUser.png\" alt=\"Profile1\" className=\"profilepic\"/>}\r\n    else if(user.pic == 2) {img =<Media object src=\"/assets/blueUser.png\" alt=\"Profile2\" className=\"profilepic\"/>}\r\n    else if(user.pic == 3) {img =<Media object src=\"/assets/purpleUser.png\" alt=\"Profile3\" className=\"profilepic\"/>}\r\n    return (\r\n        <div className=\"profile\">\r\n            <NavBar loggedIn={loggedIn} setLoggedIn ={setLoggedIn}/>\r\n            <Media>\r\n                <Media left>\r\n                    {img}\r\n                </Media>\r\n                <Media body>\r\n                    <Media heading>Welcome {user.username} to your Profile</Media>\r\n                    {user.bio}\r\n                    <Button onClick={() => setModal(true)}>Update Profile</Button>\r\n                </Media>\r\n            </Media>\r\n            <ProfileForm updateProfile={updateProfile} bio={newBio} setBio={setBio} \r\n                        user={user} setPic={setPic} modal={modalOpen} toggle={toggle}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React, {useState, useEffect} from 'react';\r\nimport {Table} from 'reactstrap';\r\n\r\nconst CartDisplay = () => {\r\n    const [cartItems, setCartItems] = useState([]);\r\n    const [total, setTotal] = useState(0);\r\n    let cart = localStorage.getItem('Cart');\r\n    useEffect(() => {\r\n        getInv();\r\n    }, []);\r\n    useEffect(() => {\r\n        getTotal();\r\n    }, [cartItems])\r\n    const getInv = () => {\r\n        fetch(`${process.env.REACT_APP_API_URL}/api/inventory`).then(response => response.json())\r\n        .then(inv => {\r\n            let invInCart = Object.assign([], inv);\r\n            invInCart = invInCart.filter((item) => {\r\n                let keep = false;\r\n                if(cart != null) {\r\n                    let cartParsed = cart.split(\",\");\r\n                    cartParsed.forEach((itemID) => {\r\n                        if(itemID == item._id) {keep = true;}\r\n                    })\r\n                }\r\n                return keep;\r\n            })\r\n            setCartItems(invInCart);\r\n        });\r\n    }\r\n    const getTotal = () => {\r\n        let myTotal = 0;\r\n        cartItems.forEach((item) => {\r\n            myTotal = myTotal + parseFloat(item.price);\r\n        })\r\n        setTotal(myTotal);\r\n    }\r\n    const displayInv = cartItems.map((item) => {\r\n        return (\r\n            <tr key={item._id} className=\"item\">\r\n                <td className=\"itemname\">{item.name}</td>\r\n                <td>${item.price}</td>\r\n            </tr>\r\n        )\r\n    });\r\n    return (\r\n        <Table striped>\r\n        <thead><th>Product Name</th><th>Price</th></thead>\r\n        <tbody>\r\n            {displayInv}\r\n            <tr><td>Total</td><td>${total}</td></tr>\r\n        </tbody>\r\n        </Table>\r\n    )\r\n}\r\n\r\nexport default CartDisplay;","import React, {useState} from 'react';\r\nimport '../stylesheets/inventory.css';\r\nimport NavBar from '../components/NavBar';\r\nimport CartDisplay from '../components/InventoryComp/CartDisplay'\r\nimport {isLoggedIn} from '../config/auth';\r\n\r\nconst Cart = () => {\r\n    const [loggedIn, setLoggedIn] = useState(isLoggedIn());\r\n    return (\r\n        <div className=\"inventory\">\r\n            <NavBar loggedIn={loggedIn} setLoggedIn ={setLoggedIn}/>\r\n            <h2>Cart Page</h2>\r\n            <CartDisplay/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cart;","import React, {useState} from 'react';\r\nimport {Form, Input, Button, Spinner} from 'reactstrap'\r\n\r\nconst SignupForm = () => {\r\n    const [username, setUserName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [pswrdconfirm, setConfirm] = useState('');\r\n    const [displaySpinner, setSpinner] = useState(false);\r\n    const [msg, setMsg] = useState('');\r\n    const [usernameTaken, setTaken] = useState(0);      //0 means not taken, 1 means username already exists in database\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        setSpinner(true);\r\n        setMsg(\"\");\r\n        if(password === pswrdconfirm && usernameTaken == 0){\r\n            const isActive = true;\r\n            const bio = \"Shop user\";\r\n            const pic = 0;\r\n            const user = {username, email, password, isActive, bio, pic};\r\n            fetch(`${process.env.REACT_APP_API_URL}/api/auth/register`, {\r\n                method: 'POST',\r\n                headers: {'Content-Type' : 'application/json'},\r\n                body: JSON.stringify(user)\r\n            }).then(() => setUserName('')).then(() => setEmail(''))\r\n                .then(() => setPassword('')).then(() => setConfirm(''))\r\n        } else if (password != pswrdconfirm && usernameTaken != 0) {\r\n            setMsg(\"Username already taken and passwords must match\")\r\n        } else if(password != pswrdconfirm) {\r\n            setMsg(\"Passwords must match\");\r\n        } else {\r\n            setMsg(\"Username already taken\")\r\n        }\r\n        setSpinner(false);\r\n    }\r\n    const handleUsername = () => {\r\n        setMsg(\"\");\r\n        fetch(`${process.env.REACT_APP_API_URL}/api/auth/${username}`)\r\n            .then(response => response.json()).then(fetchMsg => setTaken(fetchMsg.length))\r\n        if(usernameTaken == 1) {\r\n            setMsg(\"Username already taken\");\r\n        } else {\r\n            setMsg(\"\");\r\n        }\r\n    }\r\n    let spinner;\r\n    if(displaySpinner) {spinner = <Spinner color=\"primary\"/>}\r\n    else {spinner = <></>}\r\n    return (\r\n        <>\r\n            <Form className=\"signup\" onSubmit={handleSubmit}>\r\n                <Input placeholder=\"User Name\" onBlur={() => handleUsername()} onChange={({target}) => setUserName(target.value)} value={username} required/>\r\n                <Input placeholder=\"Email\" type=\"email\" onChange={({target}) => setEmail(target.value)} value={email} required/>\r\n                <Input placeholder=\"Password\" type=\"password\" onChange={({target}) => setPassword(target.value)} value={password} required/>\r\n                <Input placeholder=\"Password Confirmation\" type=\"password\" onChange={({target}) => setConfirm(target.value)} value={pswrdconfirm} required/>\r\n                <Button block>Submit</Button>\r\n                <span style={{'color': 'red'}}>{msg}</span> \r\n            </Form>\r\n            {spinner}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SignupForm;","import React from 'react';\r\nimport NavBar from '../components/NavBar'\r\nimport SignupForm from '../components/UserComp/SignupForm'\r\n\r\nconst Signup = () => {\r\n    return (\r\n        <div className=\"signup\">\r\n            <NavBar/>\r\n            <h2>Signup</h2>\r\n            <SignupForm/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Signup;","import React from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Redirect\r\n  } from 'react-router-dom';\r\nimport Home from '../pages/Home';\r\nimport Inventory from '../pages/Inventory';\r\nimport Profile from '../pages/Profile';\r\nimport Cart from '../pages/Cart';\r\nimport Signup from '../pages/Signup';\r\nimport {isLoggedIn} from '../config/auth';\r\n\r\nconst ShopRouter = () => {\r\n    return(\r\n        <Router>\r\n            <div>\r\n                <Switch>\r\n                    <PrivateRoute exact path=\"/inventory\">\r\n                        <Inventory/>  \r\n                    </PrivateRoute>\r\n                    <PrivateRoute exact path=\"/profile\">\r\n                        <Profile/>\r\n                    </PrivateRoute>\r\n                    <PrivateRoute exact path=\"/cart\">\r\n                        <Cart/>\r\n                    </PrivateRoute>\r\n                    <Route exact path=\"/signup\">\r\n                        <Signup/>\r\n                    </Route>\r\n                    <Route exact path=\"/\">\r\n                        <Home/>\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n        </Router>\r\n    )\r\n}\r\n\r\nconst PrivateRoute = ({ children, ...rest}) => {\r\n    return (\r\n        <Route {...rest} render={({location}) => \r\n            isLoggedIn() ? (children) : (\r\n            <Redirect to={{pathname: '/', state: {from: location}}} />\r\n            )\r\n        }/>\r\n    )\r\n}\r\n\r\n  export default ShopRouter;","import React from 'react';\n\nimport './stylesheets/App.css'\nimport ShopRouter from './components/ShopRouter';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ShopRouter/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './stylesheets/index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './extras/serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}