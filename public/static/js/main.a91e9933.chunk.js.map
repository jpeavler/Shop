{"version":3,"sources":["config/auth.js","components/NavBar.js","components/UserComp/LoginForm.js","pages/Home.js","components/InventoryComp/InventoryForm.js","components/InventoryComp/InventoryDisplay.js","pages/Inventory.js","components/UserComp/ProfileForm.js","pages/Profile.js","components/UserComp/SignupForm.js","pages/Signup.js","components/ShopRouter.js","App.js","extras/serviceWorker.js","index.js"],"names":["isLoggedIn","localStorage","getItem","NavBar","logBtn","loggedIn","setLoggedIn","handleLogout","removeItem","Button","onClick","color","to","className","LoginForm","useState","username","setUsername","password","setPassword","remembered","setRemembered","msg","setMsg","displaySpinner","setSpinner","useEffect","localUsername","form","spinner","Form","onSubmit","event","preventDefault","console","log","setItem","fetch","process","method","headers","body","JSON","stringify","then","response","token","status","get","Input","type","value","placeholder","onChange","target","FormGroup","name","checked","Label","for","block","style","Spinner","Home","InventoryForm","refresh","myItem","id","formName","formDesc","formCount","formPrice","modalOpen","desc","quantity","price","renderSubmit","cancel","formHeader","setName","setDesc","setCount","setPrice","modal","setModal","toggle","key","ModalHeader","Modal","isOpen","ModalBody","isActive","updatedItem","addedItem","required","min","step","InventoryDisplay","inventory","setInv","isUpdate","setUpdate","itemToUpdate","setItemToUpdate","displayActive","setActive","displayInactive","setInactive","filterModal","setFModal","getInv","renderForm","activeDisplayBtn","inactiveDisplayBtn","json","inv","toggleActive","newActiveStatus","handleSort","sortMethod","sortedInv","Object","assign","sort","a","b","displayInv","map","item","activeButton","deleteButton","_id","Card","CardHeader","CardBody","CardFooter","handleUpdate","toggleModal","CardDeck","Inventory","ProfileForm","updateProfile","bio","setBio","setPic","user","src","alt","Profile","setUser","newBio","newPic","getUserInfo","userInfo","img","pic","Media","object","left","heading","toUpdate","SignupForm","setUserName","email","setEmail","pswrdconfirm","setConfirm","usernameTaken","setTaken","onBlur","fetchMsg","length","Signup","PrivateRoute","children","rest","render","location","pathname","state","from","ShopRouter","exact","path","App","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a91e9933.chunk.js","sourcesContent":["// Returns token if it exists \r\nexport const isLoggedIn = () => {\r\n    const token = localStorage.getItem('auth');\r\n    return token;\r\n}\r\n// Removes token from LocalStorage\r\nexport const logout = () => {\r\n    localStorage.removeItem('auth');\r\n}\r\n// Stores the Auth Token in LocalStorage\r\nexport const setToken = (token) => {\r\n    localStorage.setItem('auth', token);\r\n}","import React, {useState} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {Button} from 'reactstrap';\r\nimport '../stylesheets/NavBar.css';\r\nimport {logout, isLoggedIn} from '../config/auth';\r\n\r\nconst NavBar = ({loggedIn, setLoggedIn}) =>{\r\n    //const [loggedIn, setLoggedIn] = useState(isLoggedIn());\r\n    let logBtn;\r\n    const handleLogout = () => {\r\n        logout();\r\n        setLoggedIn(false);\r\n    }\r\n    if(loggedIn) {\r\n        logBtn = <Button onClick={() => handleLogout()} color=\"primary\">Logout</Button>\r\n    } else {\r\n        logBtn = <Link to='/signup' className=\"NavLink\">Signup</Link>\r\n    }\r\n    return(\r\n        <nav>\r\n            <Link to='/' className=\"NavLink\">Home</Link>\r\n            <Link to='/profile' className=\"NavLink\">Profile</Link>\r\n            <Link to='/inventory' className=\"NavLink\">Inventory</Link>\r\n            {logBtn}\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default NavBar;","import React, {useState, useEffect} from 'react';\r\nimport {Form, FormGroup, Input, Label, Button, Spinner} from 'reactstrap';\r\nimport {setToken, isLoggedIn} from '../../config/auth';\r\n\r\nconst LoginForm = ({loggedIn, setLoggedIn}) => {\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [remembered, setRemembered] = useState(false);\r\n    const [msg, setMsg] = useState('');\r\n    const [displaySpinner, setSpinner] = useState(false);\r\n    useEffect(() => {\r\n        const localUsername = localStorage.getItem('username');\r\n        if(localUsername) {\r\n            setUsername(localUsername);\r\n            setRemembered(true);\r\n        }\r\n    }, []);\r\n    const toggleRemembered = () => {\r\n        setRemembered(!remembered);\r\n    }\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        setSpinner(true);\r\n        setMsg('');\r\n        console.log(username, password, remembered);\r\n        if(remembered) {\r\n            localStorage.setItem('username', username);\r\n        } else {\r\n            localStorage.removeItem('username');\r\n        }\r\n        fetch(`${process.env.REACT_APP_API_URL}/api/auth/login`, {\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify({username, password})\r\n        }).then(response => {\r\n            if(response.status === 200) {\r\n                setToken(response.headers.get('authentication'));\r\n                setLoggedIn(isLoggedIn());\r\n            } else {\r\n                setMsg('Login Failed');\r\n            }\r\n            setSpinner(false);\r\n        })\r\n    }\r\n    let form;\r\n    if(!loggedIn) {\r\n        form = <Form onSubmit={handleSubmit}>\r\n                    <h3>Login</h3>\r\n                    <Input type=\"text\" value={username} placeholder=\"Username\" \r\n                            onChange={({target}) => setUsername(target.value)}/>\r\n                    <Input type=\"password\" value={password} placeholder=\"Password\" \r\n                            onChange={({target}) => setPassword(target.value)}/>\r\n                    <FormGroup>\r\n                        <Input type=\"checkbox\" name=\"remember\" checked={remembered} \r\n                            onChange={toggleRemembered}/>\r\n                        <Label for=\"remember\">Remember Me</Label>\r\n                    </FormGroup>\r\n                    <Button block>Login</Button>\r\n                    <span style={{'color': 'red'}}>{msg}</span>\r\n                </Form>\r\n    } else {\r\n        form = <div>Signed In</div>\r\n    }\r\n    let spinner;\r\n    if (displaySpinner) {spinner = <Spinner color='primary'/>}\r\n    else {spinner = <></>}\r\n    return (\r\n        <>{form}{spinner}</>\r\n    )\r\n}\r\n\r\nexport default LoginForm;","import React, {useState} from 'react';\r\nimport NavBar from '../components/NavBar';\r\nimport LoginForm from '../components/UserComp/LoginForm';\r\nimport {isLoggedIn} from '../config/auth'\r\n\r\nconst Home = () => {\r\n    const [loggedIn, setLoggedIn] = useState(isLoggedIn());\r\n    return (\r\n        <div className=\"home\">\r\n            <NavBar loggedIn={loggedIn} setLoggedIn ={setLoggedIn}/>\r\n            <h2>Home</h2>\r\n            <LoginForm loggedIn={loggedIn} setLoggedIn ={setLoggedIn}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;","import React, {useState} from 'react';\r\nimport {Modal, ModalHeader, ModalBody, Form, Input, Button} from 'reactstrap';\r\n\r\nconst InventoryForm = ({refresh, myItem, id}) => {\r\n    let formName = \"\";\r\n    let formDesc = \"\";\r\n    let formCount = \"\";\r\n    let formPrice = \"\";\r\n    let modalOpen = false;\r\n    if(myItem) {\r\n        formName = myItem.name;\r\n        formDesc = myItem.desc;\r\n        formCount = myItem.quantity;\r\n        formPrice = myItem.price;\r\n        modalOpen = true;\r\n    }\r\n    const [name, setName] = useState(formName);\r\n    const [desc, setDesc] = useState(formDesc);\r\n    const [quantity, setCount] = useState(formCount);\r\n    const [price, setPrice] = useState(formPrice);\r\n    const [modal, setModal] = useState(modalOpen);\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        let isActive = true;\r\n        if(myItem) {\r\n            isActive = myItem.isActive;\r\n            const updatedItem = {name, desc, quantity, price, isActive};\r\n            fetch(`${process.env.REACT_APP_API_URL}/api/inventory/${id}`, {\r\n                method: 'PUT',\r\n                headers: {'Content-Type' : 'application/json'},\r\n                body: JSON.stringify(updatedItem)\r\n            }).then(() => setName(''))\r\n                .then(() => setDesc('')).then(() => setCount(''))\r\n                .then(() => setPrice('')).then(() => refresh()).then(() => setModal(false))\r\n        } else {\r\n            const addedItem = {name, desc, quantity, price, isActive};\r\n            fetch(`${process.env.REACT_APP_API_URL}/api/inventory`, {\r\n                method: 'POST',\r\n                headers: {'Content-Type' : 'application/json'},\r\n                body: JSON.stringify(addedItem)\r\n            }).then(() => setName(''))\r\n            .then(() => setDesc('')).then(() => setCount(''))\r\n            .then(() => setPrice('')).then(() => refresh()).then(() => setModal(false))\r\n        }\r\n    }\r\n    const toggle = () => setModal(!modal);\r\n    let renderSubmit;\r\n    let cancel;\r\n    let formHeader;\r\n    if(myItem) {\r\n        renderSubmit = <Button color=\"primary\" key=\"edit\" type=\"submit\" block>Edit Item</Button>\r\n        cancel = <Button type=\"button\" key=\"canceledit\" onClick={() => refresh()} block>Cancel Edit</Button>\r\n        formHeader = <ModalHeader key=\"edithead\">Edit Item: {myItem.name}</ModalHeader>\r\n    } else {\r\n        renderSubmit = <Button color=\"primary\" key=\"add\" type=\"submit\" block>Add Item</Button>\r\n        cancel = <Button type=\"button\" key=\"canceladd\" onClick={toggle} block>Cancel Add</Button>\r\n        formHeader = <ModalHeader key=\"addhead\">Add a New Item</ModalHeader>\r\n    }\r\n    return (\r\n        <><Button color=\"primary\" className=\"topbtn\" onClick={toggle}>Add New Item</Button>\r\n        <Modal isOpen={modal} toggle={toggle} className=\"modelform\">\r\n            {formHeader}\r\n            <ModalBody>\r\n            <Form onSubmit={handleSubmit}>\r\n                <Input placeholder=\"Item Name\" value={name} \r\n                    type=\"text\" onChange={({target}) => setName(target.value)} required/>\r\n                <Input type=\"textarea\" placeholder=\"Description\" value={desc} \r\n                    onChange={({target}) => setDesc(target.value)}/>\r\n                <Input placeholder=\"Item Count\" value={quantity} type=\"number\" \r\n                    onChange={({target}) => setCount(target.value)} required/>\r\n                <Input placeholder=\"Price\" value={price}\r\n                    type=\"number\" min=\".01\" step=\".01\" \r\n                    onChange={({target}) => setPrice(target.value)} required/>\r\n                {renderSubmit}\r\n                {cancel}\r\n            </Form>\r\n            </ModalBody>\r\n        </Modal></>\r\n    )\r\n}\r\n\r\nexport default InventoryForm;","import React, {useState, useEffect} from 'react';\r\nimport {Modal, ModalBody, ModalHeader, Button, CardDeck, Card, CardHeader, CardBody, CardFooter} from 'reactstrap'\r\n\r\nimport InventoryForm from './InventoryForm'\r\n\r\nconst InventoryDisplay = () => {\r\n    const [inventory, setInv] = useState([]);\r\n    const [isUpdate, setUpdate] = useState(false);\r\n    const [itemToUpdate, setItemToUpdate] = useState('');\r\n    const [displayActive, setActive] = useState(true);\r\n    const [displayInactive, setInactive] = useState(true);\r\n    const [filterModal, setFModal] = useState(false);  \r\n\r\n    useEffect(() => {\r\n        getInv();\r\n    }, []);\r\n    const getInv = () => {\r\n        fetch(`${process.env.REACT_APP_API_URL}/api/inventory`)\r\n            .then(response => response.json()).then(inv => setInv(inv))\r\n            .then(setUpdate(false)).then(setItemToUpdate(''))\r\n    }\r\n    const handleUpdate = (item) => {\r\n        setItemToUpdate(item);\r\n        setUpdate(true);\r\n    }\r\n    const handleDelete = (id) => {\r\n        fetch(`${process.env.REACT_APP_API_URL}/api/inventory/${id}`, {\r\n            method: 'DELETE'\r\n        }).then(response => response.json()).then(getInv)\r\n    }\r\n    const toggleActive = (id, isActive) => {\r\n        const newActiveStatus = {isActive};\r\n        fetch(`${process.env.REACT_APP_API_URL}/api/inventory/${id}`, {\r\n            method: 'PATCH',\r\n            headers: {'Content-Type' : 'application/json'},\r\n            body: JSON.stringify(newActiveStatus)\r\n        }).then(getInv)\r\n    }\r\n    const handleSort = (sortMethod) => {\r\n        let sortedInv = Object.assign([], inventory);\r\n        if(sortMethod == \"quantity\") {\r\n            sortedInv.sort((a, b) => b.quantity - a.quantity);\r\n        } else if(sortMethod == \"price\") {\r\n            sortedInv.sort((a, b) => b.price - a.price);\r\n        }\r\n        setInv(sortedInv);\r\n    }\r\n    const displayInv = inventory.map((item) => {\r\n        let activeButton;\r\n        let deleteButton;\r\n        if(item.isActive) {\r\n            activeButton = <Button color=\"warning\" onClick={() => toggleActive(item._id, false)} block>Deactivate</Button>\r\n        } else {\r\n            activeButton = <Button color=\"success\" onClick={() => toggleActive(item._id, true)} block>Activate</Button>\r\n            deleteButton = <Button color=\"danger\" onClick={() => handleDelete(item._id)} block>Delete</Button>      \r\n        }\r\n        if((item.isActive && displayActive) || (!item.isActive && displayInactive)) {\r\n            return (\r\n                <Card key={item._id} className=\"item\">\r\n                    <CardHeader className=\"itemname\">{item.name}</CardHeader>\r\n                    <CardBody>\r\n                        <p className=\"price\">Price: ${item.price}</p>\r\n                        <p className=\"quantity\">Count: {item.quantity}</p>\r\n                        <p className=\"description\">{item.desc}</p>\r\n                    </CardBody>\r\n                    <CardFooter>\r\n                        <Button color=\"primary\" onClick={() => handleUpdate(item)} block>Edit</Button>\r\n                        {activeButton}\r\n                        {deleteButton}\r\n                    </CardFooter>\r\n                </Card>\r\n            )\r\n        }\r\n    });\r\n    const toggleModal = () => setFModal(!filterModal);\r\n    let renderForm;\r\n    if(isUpdate) {\r\n        renderForm = <InventoryForm key={itemToUpdate._id} refresh={getInv} isUpdate={isUpdate} myItem={itemToUpdate} id={itemToUpdate._id}/>\r\n    } else {\r\n        renderForm = <InventoryForm key=\"additem\" refresh={getInv} isUpdate={isUpdate}/>\r\n    }\r\n    let activeDisplayBtn;\r\n    if(displayActive) {\r\n        activeDisplayBtn = <Button color=\"primary\" key=\"hideAct\" onClick={() => setActive(false)} block>Hide Active</Button>\r\n    }else {\r\n        activeDisplayBtn = <Button color=\"primary\" key=\"showAct\" onClick={() => setActive(true)} block>Show Active</Button>\r\n    }\r\n    let inactiveDisplayBtn;\r\n    if(displayInactive) {\r\n        inactiveDisplayBtn = <Button color=\"primary\" key=\"hideIn\" onClick={() => setInactive(false)} block>Hide Inactive</Button>\r\n    }else {\r\n        inactiveDisplayBtn = <Button color=\"primary\" key=\"showIn\" onClick={() => setInactive(true)} block>Show Inactive</Button>\r\n    }\r\n    return (\r\n        <div key=\"inventory\" className=\"inventory\">\r\n            <h1>My Inventory</h1>\r\n            {renderForm}\r\n            <Button color=\"primary\" className=\"topbtn\" onClick={() => toggleModal()}>Display Settings</Button>\r\n            <Modal key=\"filter\" isOpen={filterModal} toggle={toggleModal} className=\"modaltoggle\">\r\n                <ModalHeader>Sort and Hide Options</ModalHeader>\r\n                <ModalBody>\r\n                {activeDisplayBtn}\r\n                {inactiveDisplayBtn}\r\n                <Button color=\"primary\" onClick={() => handleSort(\"quantity\")} block>Sort by Count</Button>\r\n                <Button color=\"primary\" onClick={() => handleSort(\"price\")} block>Sort by Price</Button>\r\n                <Button color=\"secondary\" onClick={() => toggleModal()} block>Close</Button>\r\n                </ModalBody>\r\n            </Modal>\r\n            <CardDeck className=\"inventorydeck\">{displayInv}</CardDeck>\r\n        </div>\r\n    )\r\n}\r\nexport default InventoryDisplay;","import React, {useState} from 'react';\r\nimport '../stylesheets/inventory.css';\r\nimport InventoryDisplay from '../components/InventoryComp/InventoryDisplay';\r\nimport NavBar from '../components/NavBar';\r\nimport {isLoggedIn} from '../config/auth';\r\n\r\nconst Inventory = () => {\r\n    const [loggedIn, setLoggedIn] = useState(isLoggedIn());\r\n    return (\r\n        <div className=\"inventory\">\r\n            <NavBar loggedIn={loggedIn} setLoggedIn ={setLoggedIn}/>\r\n            <InventoryDisplay/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Inventory;","import React from 'react';\r\nimport {Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, Input} from 'reactstrap';\r\nimport '../../stylesheets/profile.css';\r\n\r\nconst ProfileForm = ({updateProfile, bio, setBio, setPic, modal, toggle, user}) => {\r\n    return (\r\n        <Modal isOpen={modal} toggle={toggle} className=\"profileform\">\r\n            <ModalHeader toggle={toggle}>Edit Portfolio</ModalHeader>\r\n            <ModalBody><Form onSubmit={updateProfile}>\r\n                <Input type=\"textarea\" value={bio} onChange={({target}) => setBio(target.value)} required/>\r\n                <button type=\"button\" onClick={() => setPic(0)}>\r\n                    <img src=\"/assets/blackUser.png\" alt=\"Profile0\" className=\"profilepic\"/>\r\n                </button>\r\n                <button type=\"button\" onClick={() => setPic(1)}>\r\n                    <img src=\"/assets/redUser.png\" alt=\"Profile1\" className=\"profilepic\"/>\r\n                </button>\r\n                <button type=\"button\" onClick={() => setPic(2)}>\r\n                    <img src=\"/assets/blueUser.png\" alt=\"Profile2\" className=\"profilepic\"/>\r\n                </button>\r\n                <button type=\"button\" onClick={() => setPic(3)}>\r\n                    <img src=\"/assets/purpleUser.png\" alt=\"Profile3\" className=\"profilepic\"/>\r\n                </button>\r\n                <Button color=\"primary\" block>Update Profile</Button>\r\n            </Form></ModalBody>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ProfileForm;","import React, {useState, useEffect} from 'react';\r\nimport {Button, Media} from 'reactstrap';\r\nimport NavBar from '../components/NavBar'\r\nimport {isLoggedIn} from '../config/auth';\r\nimport ProfileForm from '../components/UserComp/ProfileForm';\r\n\r\nconst Profile = () => {\r\n    const [loggedIn, setLoggedIn] = useState(isLoggedIn());     //loggedIn returns the token if the user is logged in\r\n    const [user, setUser] = useState(\"\");\r\n    const [newBio, setBio] = useState(\"\");\r\n    const [newPic, setPic] = useState(0);\r\n    const [modalOpen, setModal] = useState(false);\r\n\r\n    const getUserInfo = () => {\r\n        fetch(`${process.env.REACT_APP_API_URL}/api/auth/id/${loggedIn}`)\r\n        .then(response => response.json()).then(userInfo => setUser(userInfo))\r\n    }\r\n    const updateProfile = (event) => {\r\n        event.preventDefault();\r\n        let toUpdate = {bio: newBio, pic: newPic};\r\n        fetch(`${process.env.REACT_APP_API_URL}/api/auth/id/${loggedIn}`, {\r\n            method: \"PATCH\",\r\n            headers: {'Content-Type' : 'application/json'},\r\n            body: JSON.stringify(toUpdate)\r\n        }).then(() => getUserInfo()).then(() => setModal(false))\r\n    }\r\n    useEffect(() => {\r\n        getUserInfo();\r\n    }, []);\r\n    const toggle = () => {setModal(!modalOpen)}\r\n\r\n    let img;\r\n    if(user.pic == 0) {img =<Media object src=\"/assets/blackUser.png\" alt=\"Profile0\" className=\"profilepic\"/>}\r\n    else if(user.pic == 1) {img =<Media object src=\"/assets/redUser.png\" alt=\"Profile1\" className=\"profilepic\"/>}\r\n    else if(user.pic == 2) {img =<Media object src=\"/assets/blueUser.png\" alt=\"Profile2\" className=\"profilepic\"/>}\r\n    else if(user.pic == 3) {img =<Media object src=\"/assets/purpleUser.png\" alt=\"Profile3\" className=\"profilepic\"/>}\r\n    return (\r\n        <div className=\"profile\">\r\n            <NavBar loggedIn={loggedIn} setLoggedIn ={setLoggedIn}/>\r\n            <Media>\r\n                <Media left>\r\n                    {img}\r\n                </Media>\r\n                <Media body>\r\n                    <Media heading>Welcome {user.username} to your Profile</Media>\r\n                    {user.bio}\r\n                    <Button onClick={() => setModal(true)}>Update Profile</Button>\r\n                </Media>\r\n            </Media>\r\n            <ProfileForm updateProfile={updateProfile} bio={newBio} setBio={setBio} \r\n                        user={user} setPic={setPic} modal={modalOpen} toggle={toggle}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React, {useState} from 'react';\r\nimport {Form, Input, Button, Spinner} from 'reactstrap'\r\n\r\nconst SignupForm = () => {\r\n    const [username, setUserName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [pswrdconfirm, setConfirm] = useState('');\r\n    const [displaySpinner, setSpinner] = useState(false);\r\n    const [msg, setMsg] = useState('');\r\n    const [usernameTaken, setTaken] = useState(0);      //0 means not taken, 1 means username already exists in database\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        setSpinner(true);\r\n        setMsg(\"\");\r\n        if(password === pswrdconfirm && usernameTaken == 0){\r\n            const isActive = true;\r\n            const bio = \"Shop user\";\r\n            const pic = \"default.jpg\";\r\n            const user = {username, email, password, isActive, bio, pic};\r\n            fetch(`${process.env.REACT_APP_API_URL}/api/auth/register`, {\r\n                method: 'POST',\r\n                headers: {'Content-Type' : 'application/json'},\r\n                body: JSON.stringify(user)\r\n            }).then(() => setUserName('')).then(() => setEmail(''))\r\n                .then(() => setPassword('')).then(() => setConfirm(''))\r\n        } else if (password != pswrdconfirm && usernameTaken != 0) {\r\n            setMsg(\"Username already taken and passwords must match\")\r\n        } else if(password != pswrdconfirm) {\r\n            setMsg(\"Passwords must match\");\r\n        } else {\r\n            setMsg(\"Username already taken\")\r\n        }\r\n        setSpinner(false);\r\n    }\r\n    const handleUsername = () => {\r\n        setMsg(\"\");\r\n        fetch(`${process.env.REACT_APP_API_URL}/api/auth/${username}`)\r\n            .then(response => response.json()).then(fetchMsg => setTaken(fetchMsg.length))\r\n        if(usernameTaken == 1) {\r\n            setMsg(\"Username already taken\");\r\n        } else {\r\n            setMsg(\"\");\r\n        }\r\n    }\r\n    let spinner;\r\n    if(displaySpinner) {spinner = <Spinner color=\"primary\"/>}\r\n    else {spinner = <></>}\r\n    return (\r\n        <>\r\n            <Form className=\"signup\" onSubmit={handleSubmit}>\r\n                <Input placeholder=\"User Name\" onBlur={() => handleUsername()} onChange={({target}) => setUserName(target.value)} value={username} required/>\r\n                <Input placeholder=\"Email\" type=\"email\" onChange={({target}) => setEmail(target.value)} value={email} required/>\r\n                <Input placeholder=\"Password\" type=\"password\" onChange={({target}) => setPassword(target.value)} value={password} required/>\r\n                <Input placeholder=\"Password Confirmation\" type=\"password\" onChange={({target}) => setConfirm(target.value)} value={pswrdconfirm} required/>\r\n                <Button block>Submit</Button>\r\n                <span style={{'color': 'red'}}>{msg}</span> \r\n            </Form>\r\n            {spinner}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SignupForm;","import React from 'react';\r\nimport NavBar from '../components/NavBar'\r\nimport SignupForm from '../components/UserComp/SignupForm'\r\n\r\nconst Signup = () => {\r\n    return (\r\n        <div className=\"signup\">\r\n            <NavBar/>\r\n            <h2>Signup</h2>\r\n            <SignupForm/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Signup;","import React from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Redirect\r\n  } from 'react-router-dom';\r\nimport Home from '../pages/Home';\r\nimport Inventory from '../pages/Inventory';\r\nimport Profile from '../pages/Profile';\r\nimport Signup from '../pages/Signup';\r\nimport {isLoggedIn} from '../config/auth';\r\n\r\nconst ShopRouter = () => {\r\n    return(\r\n        <Router>\r\n            <div>\r\n                <Switch>\r\n                    <PrivateRoute exact path=\"/inventory\">\r\n                        <Inventory/>  \r\n                    </PrivateRoute>\r\n                    <PrivateRoute exact path=\"/profile\">\r\n                        <Profile/>\r\n                    </PrivateRoute>\r\n                    <Route exact path=\"/signup\">\r\n                        <Signup/>\r\n                    </Route>\r\n                    <Route exact path=\"/\">\r\n                        <Home/>\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n        </Router>\r\n    )\r\n}\r\n\r\nconst PrivateRoute = ({ children, ...rest}) => {\r\n    return (\r\n        <Route {...rest} render={({location}) => \r\n            isLoggedIn() ? (children) : (\r\n            <Redirect to={{pathname: '/', state: {from: location}}} />\r\n            )\r\n        }\r\n        />\r\n    )\r\n}\r\n\r\n  export default ShopRouter;","import React from 'react';\n\nimport './stylesheets/App.css'\nimport ShopRouter from './components/ShopRouter';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ShopRouter/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './stylesheets/index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './extras/serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}