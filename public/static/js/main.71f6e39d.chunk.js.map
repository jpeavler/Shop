{"version":3,"sources":["components/InventoryComp/InventoryForm.js","components/InventoryComp/InventoryDisplay.js","App.js","extras/serviceWorker.js","index.js"],"names":["InventoryForm","refresh","myItem","id","formName","formDesc","formCount","formPrice","modalOpen","name","desc","quantity","price","renderSubmit","cancel","formHeader","useState","setName","setDesc","setCount","setPrice","modal","setModal","toggle","Button","color","key","type","block","onClick","ModalHeader","className","Modal","isOpen","ModalBody","Form","onSubmit","event","preventDefault","isActive","updatedItem","fetch","process","method","headers","body","JSON","stringify","then","addedItem","Input","placeholder","value","onChange","target","required","min","step","InventoryDisplay","inventory","setInv","isUpdate","setUpdate","itemToUpdate","setItemToUpdate","displayActive","setActive","displayInactive","setInactive","filterModal","setFModal","useEffect","getInv","renderForm","activeDisplayBtn","inactiveDisplayBtn","response","json","inv","toggleActive","newActiveStatus","handleSort","sortMethod","sortedInv","Object","assign","sort","a","b","displayInv","map","item","activeButton","deleteButton","_id","Card","CardHeader","CardBody","CardFooter","handleUpdate","toggleModal","CardDeck","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.71f6e39d.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport {Modal, ModalHeader, ModalBody, Form, Input, Button} from 'reactstrap';\r\n\r\nconst InventoryForm = ({refresh, myItem, id}) => {\r\n    let formName = \"\";\r\n    let formDesc = \"\";\r\n    let formCount = \"\";\r\n    let formPrice = \"\";\r\n    let modalOpen = false;\r\n    if(myItem) {\r\n        formName = myItem.name;\r\n        formDesc = myItem.desc;\r\n        formCount = myItem.quantity;\r\n        formPrice = myItem.price;\r\n        modalOpen = true;\r\n    }\r\n    const [name, setName] = useState(formName);\r\n    const [desc, setDesc] = useState(formDesc);\r\n    const [quantity, setCount] = useState(formCount);\r\n    const [price, setPrice] = useState(formPrice);\r\n    const [modal, setModal] = useState(modalOpen);\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        let isActive = true;\r\n        if(myItem) {\r\n            isActive = myItem.isActive;\r\n            const updatedItem = {name, desc, quantity, price, isActive};\r\n            fetch(`${process.env.REACT_APP_API_URL}/api/inventory/${id}`, {\r\n                method: 'PUT',\r\n                headers: {'Content-Type' : 'application/json'},\r\n                body: JSON.stringify(updatedItem)\r\n            }).then(() => setName(''))\r\n                .then(() => setDesc('')).then(() => setCount(''))\r\n                .then(() => setPrice('')).then(() => refresh()).then(() => setModal(false))\r\n        } else {\r\n            const addedItem = {name, desc, quantity, price, isActive};\r\n            fetch(`${process.env.REACT_APP_API_URL}/api/inventory`, {\r\n                method: 'POST',\r\n                headers: {'Content-Type' : 'application/json'},\r\n                body: JSON.stringify(addedItem)\r\n            }).then(() => setName(''))\r\n            .then(() => setDesc('')).then(() => setCount(''))\r\n            .then(() => setPrice('')).then(() => refresh()).then(() => setModal(false))\r\n        }\r\n    }\r\n    const toggle = () => setModal(!modal);\r\n    let renderSubmit;\r\n    let cancel;\r\n    let formHeader;\r\n    if(myItem) {\r\n        renderSubmit = <Button color=\"primary\" key=\"edit\" type=\"submit\" block>Edit Item</Button>\r\n        cancel = <Button type=\"button\" key=\"canceledit\" onClick={() => refresh()} block>Cancel Edit</Button>\r\n        formHeader = <ModalHeader key=\"edithead\">Edit Item: {myItem.name}</ModalHeader>\r\n    } else {\r\n        renderSubmit = <Button color=\"primary\" key=\"add\" type=\"submit\" block>Add Item</Button>\r\n        cancel = <Button type=\"button\" key=\"canceladd\" onClick={toggle} block>Cancel Add</Button>\r\n        formHeader = <ModalHeader key=\"addhead\">Add a New Item</ModalHeader>\r\n    }\r\n    return (\r\n        <><Button color=\"primary\" className=\"topbtn\" onClick={toggle}>Add New Item</Button>\r\n        <Modal isOpen={modal} toggle={toggle} className=\"modelform\">\r\n            {formHeader}\r\n            <ModalBody>\r\n            <Form onSubmit={handleSubmit}>\r\n                <Input placeholder=\"Item Name\" value={name} \r\n                    type=\"text\" onChange={({target}) => setName(target.value)} required/>\r\n                <Input type=\"textarea\" placeholder=\"Description\" value={desc} \r\n                    onChange={({target}) => setDesc(target.value)}/>\r\n                <Input placeholder=\"Item Count\" value={quantity} type=\"number\" \r\n                    onChange={({target}) => setCount(target.value)} required/>\r\n                <Input placeholder=\"Price\" value={price}\r\n                    type=\"number\" min=\".01\" step=\".01\" \r\n                    onChange={({target}) => setPrice(target.value)} required/>\r\n                {renderSubmit}\r\n                {cancel}\r\n            </Form>\r\n            </ModalBody>\r\n        </Modal></>\r\n    )\r\n}\r\n\r\nexport default InventoryForm;","import React, {useState, useEffect} from 'react';\r\nimport {Modal, ModalBody, ModalHeader, Button, CardDeck, Card, CardHeader, CardBody, CardFooter} from 'reactstrap'\r\n\r\nimport InventoryForm from './InventoryForm'\r\n\r\nconst InventoryDisplay = () => {\r\n    const [inventory, setInv] = useState([]);\r\n    const [isUpdate, setUpdate] = useState(false);\r\n    const [itemToUpdate, setItemToUpdate] = useState('');\r\n    const [displayActive, setActive] = useState(true);\r\n    const [displayInactive, setInactive] = useState(true);\r\n    const [filterModal, setFModal] = useState(false);  \r\n\r\n    useEffect(() => {\r\n        getInv();\r\n    }, []);\r\n    const getInv = () => {\r\n        fetch(`${process.env.REACT_APP_API_URL}/api/inventory`)\r\n            .then(response => response.json()).then(inv => setInv(inv))\r\n            .then(setUpdate(false)).then(setItemToUpdate(''))\r\n    }\r\n    const handleUpdate = (item) => {\r\n        setItemToUpdate(item);\r\n        setUpdate(true);\r\n    }\r\n    const handleDelete = (id) => {\r\n        fetch(`${process.env.REACT_APP_API_URL}/api/inventory/${id}`, {\r\n            method: 'DELETE'\r\n        }).then(response => response.json()).then(getInv)\r\n    }\r\n    const toggleActive = (id, isActive) => {\r\n        const newActiveStatus = {isActive};\r\n        fetch(`${process.env.REACT_APP_API_URL}/api/inventory/${id}`, {\r\n            method: 'PATCH',\r\n            headers: {'Content-Type' : 'application/json'},\r\n            body: JSON.stringify(newActiveStatus)\r\n        }).then(getInv)\r\n    }\r\n    const handleSort = (sortMethod) => {\r\n        let sortedInv = Object.assign([], inventory);\r\n        if(sortMethod == \"quantity\") {\r\n            sortedInv.sort((a, b) => b.quantity - a.quantity);\r\n        } else if(sortMethod == \"price\") {\r\n            sortedInv.sort((a, b) => b.price - a.price);\r\n        }\r\n        setInv(sortedInv);\r\n    }\r\n    const displayInv = inventory.map((item) => {\r\n        let activeButton;\r\n        let deleteButton;\r\n        if(item.isActive) {\r\n            activeButton = <Button color=\"warning\" onClick={() => toggleActive(item._id, false)} block>Deactivate</Button>\r\n        } else {\r\n            activeButton = <Button color=\"success\" onClick={() => toggleActive(item._id, true)} block>Activate</Button>\r\n            deleteButton = <Button color=\"danger\" onClick={() => handleDelete(item._id)} block>Delete</Button>      \r\n        }\r\n        if((item.isActive && displayActive) || (!item.isActive && displayInactive)) {\r\n            return (\r\n                <Card key={item._id} className=\"item\">\r\n                    <CardHeader className=\"itemname\">{item.name}</CardHeader>\r\n                    <CardBody>\r\n                        <p className=\"price\">Price: ${item.price}</p>\r\n                        <p className=\"quantity\">Count: {item.quantity}</p>\r\n                        <p className=\"description\">{item.desc}</p>\r\n                    </CardBody>\r\n                    <CardFooter>\r\n                        <Button color=\"primary\" onClick={() => handleUpdate(item)} block>Edit</Button>\r\n                        {activeButton}\r\n                        {deleteButton}\r\n                    </CardFooter>\r\n                </Card>\r\n            )\r\n        }\r\n    });\r\n    const toggleModal = () => setFModal(!filterModal);\r\n    let renderForm;\r\n    if(isUpdate) {\r\n        renderForm = <InventoryForm key={itemToUpdate._id} refresh={getInv} isUpdate={isUpdate} myItem={itemToUpdate} id={itemToUpdate._id}/>\r\n    } else {\r\n        renderForm = <InventoryForm key=\"additem\" refresh={getInv} isUpdate={isUpdate}/>\r\n    }\r\n    let activeDisplayBtn;\r\n    if(displayActive) {\r\n        activeDisplayBtn = <Button color=\"primary\" key=\"hideAct\" onClick={() => setActive(false)} block>Hide Active</Button>\r\n    }else {\r\n        activeDisplayBtn = <Button color=\"primary\" key=\"showAct\" onClick={() => setActive(true)} block>Show Active</Button>\r\n    }\r\n    let inactiveDisplayBtn;\r\n    if(displayInactive) {\r\n        inactiveDisplayBtn = <Button color=\"primary\" key=\"hideIn\" onClick={() => setInactive(false)} block>Hide Inactive</Button>\r\n    }else {\r\n        inactiveDisplayBtn = <Button color=\"primary\" key=\"showIn\" onClick={() => setInactive(true)} block>Show Inactive</Button>\r\n    }\r\n    return (\r\n        <div key=\"inventory\" className=\"inventory\">\r\n            <h1>My Inventory</h1>\r\n            {renderForm}\r\n            <Button color=\"primary\" className=\"topbtn\" onClick={() => toggleModal()}>Display Settings</Button>\r\n            <Modal key=\"filter\" isOpen={filterModal} toggle={toggleModal} className=\"modaltoggle\">\r\n                <ModalHeader>Sort and Hide Options</ModalHeader>\r\n                <ModalBody>\r\n                {activeDisplayBtn}\r\n                {inactiveDisplayBtn}\r\n                <Button color=\"primary\" onClick={() => handleSort(\"quantity\")} block>Sort by Count</Button>\r\n                <Button color=\"primary\" onClick={() => handleSort(\"price\")} block>Sort by Price</Button>\r\n                <Button color=\"secondary\" onClick={() => toggleModal()} block>Close</Button>\r\n                </ModalBody>\r\n            </Modal>\r\n            <CardDeck className=\"inventorydeck\">{displayInv}</CardDeck>\r\n        </div>\r\n    )\r\n}\r\nexport default InventoryDisplay;","import React from 'react';\n\nimport './stylesheets/App.css';\nimport InventoryDisplay from './components/InventoryComp/InventoryDisplay';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <InventoryDisplay/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './stylesheets/index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './extras/serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}